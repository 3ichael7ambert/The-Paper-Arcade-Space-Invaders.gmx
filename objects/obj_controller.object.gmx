<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pauseon=false
// pause screen variable

menu        =   virtual_key_add(291, 3,25,17, k_menu);
escape      =   virtual_key_add(291,27,25,17, k_quit);
vkup        =   virtual_key_add(24,310,32,32, k_up );
vkright     =   virtual_key_add(48,334,32,32, k_right );
vkdown      =   virtual_key_add(24,358,32,32, k_down );
vkleft      =   virtual_key_add(0,344, 32,32, k_left );
//Simple Cardinal direction D-Pad, to add 8 dorections, duplicate the style bellow this.

bbutton3    =   virtual_key_add(292,160,28,28,k_dash);
bbutton6    =   virtual_key_add(288,182,32,36,k_dash);
bbutton9    =   virtual_key_add(292,212,28,28,k_dash);

xbutton1    =   virtual_key_add(242,160,28,28,k_shoot);
xbutton4    =   virtual_key_add(240,182,32,36,k_shoot);
xbutton7    =   virtual_key_add(240,212,28,28,k_shoot);

abutton7    =   virtual_key_add(564,318,100,100,k_jump);
abutton8    =   virtual_key_add(564,318,100,100,k_jump);
abutton9    =   virtual_key_add(564,318,100,100,k_jump);

ybutton1    =   virtual_key_add(242,160,28,28,k_special);
ybutton2    =   virtual_key_add(262,160,36,32,k_special);
ybutton3    =   virtual_key_add(292,160,28,28,k_special);


// 8 touch points, with each corner having overlapping copies so that pressing in a diagonal to hit two buttons activates them both, allowing the closest feasable digital controls.
// Layout follows           1   2   3
//                          4       6
//                          7   8   9
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(k_menu)==true 
{
    if (pauseon=false)
    {
        pauseon=true;
        instance_deactivate_all(1); //disables all but the control object
    } 
    else
    {  
        instance_activate_all(); //reactivates all objects
        pauseon=false;
    }
}

if keyboard_check_pressed(k_quit)==true and pauseon==true game_end() //exits the program
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
        if keyboard_check(k_up) draw_sprite(sp_u_button,0,24,310)
        else draw_sprite(sp_u_button,1,24,310)

        if keyboard_check(k_right) draw_sprite(sp_r_button,0,48,334)
        else draw_sprite(sp_r_button,1,48,334)

        if keyboard_check(k_down) draw_sprite(sp_d_button,0,24,358)
        else draw_sprite(sp_d_button,1,24,358)

        if keyboard_check(k_left) draw_sprite(sp_l_button,0,0,334)
        else draw_sprite(sp_l_button,1,0,334)

        if keyboard_check(k_jump)==1 draw_sprite(sprite42,0,564,318)
        else draw_sprite(sprite42,1,564,318)

        
        draw_sprite(sp_menu,0,291,3)
        if pauseon==true draw_sprite(sp_exit,0,291,27)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
